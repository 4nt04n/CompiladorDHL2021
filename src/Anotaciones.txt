Análisis sintáctico

Mira estructura del programa

Ej -> Artículo sustantivo verbo

        El perro corre -> Ok
        La árbol vuela -> Ok

Dos tipos:
    - Análisis Sintáctico Descendente
    - Análisis Sintáctico Ascendente


Análisis Sintáctico Descendente

Un ASD tiene dos funciones básicas:
    - derivar
    - match

Regla
s : '(' s ')' s
  |
  ;

Entrada:
(())()

$ s                   (())() $ derivar
$ s ) s (             (())() $ match
$ s ) s                ())() $ derivar
$ s ) s ) s (          ())() $ match
$ s ) s ) s             ))() $ derivar
$ s ) s )               ))() $ match
$ s ) s                  )() $ derivar
$ s )                    )() $ match
$ s                       () $ derivar
$ s ) s (                 () $ match
$ s ) s                    ) $ derivar
$ s )                      ) $ match
$ s                          $ derivar
$                            $ Ok

            s
        /  /  \     \
       (   s   )      s
        / / \ \    / / \ \
       (  s  ) s  (  s  ) s
          |    |     |    |


Entrada:
(()()

$ s                    (()() $ derivar
$ s ) s (              (()() $ match
$ s ) s                 ()() $ derivar
$ s ) s ) s              )() $ derivar
$ s ) s                   () $ match
$ s ) s                   () $ derivar
$ s ) s ) s (             () $ match
$ s ) s ) s                ) $ derivar
$ s ) s )                  ) $ match
$ s ) s                      $ derivar
$ s )                        $ ERROR


Entrada:
(()))

$ s                    (())) $ derivar
$ s ) s (              (())) $ match
$ s ) s                 ())) $ derivar
$ s ) s ) s (           ())) $ match
$ s ) s ) s              ))) $ derivar
$ s ) s )                ))) $ match
$ s ) s                   )) $ derivar
$ s )                     )) $ match
$ s                        ) $ derivar
$                          ) $ ERROR


--------
Análisis Sintáctico Ascendente

Un ASA tiene dos funciones básicas:
    - desplazar
    - reducir

Regla
s : '(' s ')' s
  |
  ;

Entrada:
(())()

$                     (())() $ desplazar
$ (                    ())() $ desplazar
$ ( (                   ))() $ reducir
$ ( ( s                 ))() $ desplazar
$ ( ( s )                )() $ reducir
$ ( ( s ) s              )() $ reducir
$ ( s                    )() $ desplazar
$ ( s )                   () $ desplazar
$ ( s ) (                  ) $ reducir
$ ( s ) ( s                ) $ desplazar
$ ( s ) ( s )                $ reducir
$ ( s ) ( s ) s              $ reducir
$ ( s ) s                    $ reducir
$ s                          $ OK


          s
       / | \   \
      /  s  \     s
     / // \\ \   // \\
    ( ( s ) s ) ( s ) s
        |   |     |   |


Entrada:
(()()

$                      (()() $ desplazar
$ (                     ()() $ desplazar
$ ( (                    )() $ reducir
$ ( ( s                  )() $ desplazar
$ ( ( s )                 () $ desplazar
$ ( ( s ) (                ) $ reducir
$ ( ( s ) ( s              ) $ desplazar
$ ( ( s ) ( s )              $ reducir
$ ( ( s ) ( s ) s            $ reducir
$ ( ( s ) s                  $ reducir
$ ( s                        $ ERROR


Entrada:
(()))

$                      (())) $ desplazar
$ (                     ())) $ desplazar
$ ( (                    ))) $ reducir
$ ( ( s                  ))) $ desplazar
$ ( ( s )                 )) $ reducir
$ ( ( s ) s               )) $ reducir
$ ( s                     )) $ desplazar
$ ( s )                    ) $ reducir
$ ( s ) s                  ) $ reducir
$ s                        ) $ ERROR



================

LaTeX --> TeX (Donald Knuth)

This is TeX, Version 3.14159265 (TeX Live 2019/dev/Debian) (preloaded format=tex)


================

Tabla de símbolos

Contiene todos los ID del programa

ID de tipo variables
ID de tipo funciones

Se la usa para la compilación y para la depuración

$ gcc -g a.c
$ gdb ./a.out


La TS recolecta todos los ID y los clasifica por contexto

Los ID se buscan desde el contexto local hacia el global
Los ID se agregan solo en el contexto local

Necesitamos implementar las funciones:
 - Buscar ID -> Recorre los contextos de local a global
 - Buscar ID Local -> solo localmente
 - Agregar ID -> Agrega ID en el contexto local

***********************

Código Intermedio

Comienza la etapa de síntesis

Representación independiente del lenguaje de entrada y del hardware

Una de las representaciones más utilizadas es el Código de Tres Direcciones

Operación básica  ->  x = y op z

  (en esamblador sería por ej  MOV AX, BX, CX)

Otros casos:
  x = y op 5
  x = y
  x = 0

  label l
  jmp l

  beq x jmp l

  push x
  pop x

Qué necesitamos?
  1) Generador de variables temporales
  2) Generador de etiquetas

--
Algunas trasnformaciones

x = y * 2 - z * z / 4 + 6;

-->
  t0 = y * 2
  t1 = z * z
  t2 = t1 / 4
  t3 = t0 - t2
  t4 = t3 + 6
  x = t4


if (x < 0)
  y = -1;
else
  y = 1;

-->
  ifjmp x < 10, l0
  y = -1
  jmp l1
  label l0
  y = 1
  label l1


for (i = 0; i < 10; i++)
  x += 2;

i = 0
label l0
ifnjmp i < 10, l1
x = x + 2
i = i + 1
jmp l0
label l1


i = 0;
while (i < 10) {
  x += 2;
  i++;
}


int f (int x) {
  return x * x * x;
}
...
y = f(x);

label l0
pop t0
pop x
t1 = x * x
t2 = t1 * x
push t2
jmp t0


push x
push l1
jmp l0
label l1
pop y